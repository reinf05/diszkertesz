name: WebAPI Pipeline

on:
  push:
    branches:
      - dev
      - main
    #paths:
      #- 'diszkerteszAPI/**'

jobs:
  sonar:
    runs-on: windows-latest
    steps:

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available

      - name: "Checkout code"
        uses: actions/checkout@v5
        with:
          #Useful for SonarQube
          fetch-depth: 0

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
          
      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path ${{ runner.temp }}\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path ${{ runner.temp }}\scanner
          
      - name: Build and analyze
        working-directory: diszkerteszAPI
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          Write-Host "=== SonarScanner BEGIN ==="
          ${{ runner.temp }}\scanner\dotnet-sonarscanner begin /k:"reinf05_diszkertesz" /o:"reinf05" /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          Write-Host "=== PROJECT BUILD ==="
          dotnet build
          Write-Host "=== SonarScanner  END ==="
          ${{ runner.temp }}\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          Write-Host "=== END FINISHED ==="
          
      - name: Debug â€“ find report-task.txt
        shell: powershell
        run: |
          Write-Host "Current directory: $PWD"
          Get-ChildItem -Path $PWD -Recurse -Filter report-task.txt | ForEach-Object {
            Write-Host "Found file at: $($_.FullName)"
          }
      
      - name: "Set up Quality Gate"
        uses: SonarSource/sonarqube-quality-gate-action@cf038b0e0cdecfa9e56c198bbb7d21d751d62c3b
        id: sonarqube-quality-gate-check
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: diszkerteszAPI/.scannerwork/report-task.txt

      - name: "Example show SonarQube Quality Gate Status value"
        if: always()
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

